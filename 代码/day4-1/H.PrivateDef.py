'''
一、什么是封装

在程序设计中，封装（Encapsulation）是对具体对象的一种抽象，即将某些部分隐藏起来，在程序外部看不到，其

含义是其他程序无法调用。

要了解封装，离不开“私有化”，就是将类或者是函数中的某些属性限制在某个区域之内，外部无法调用。

二、为什么要封装

封装数据的主要原因是：保护隐私（把不想别人知道的东西封装起来）

封装方法的主要原因是：隔离复杂度（比如：电视机，我们看见的就是一个黑匣子，其实里面有很多电器元件，对于

用户来说，我们不需要清楚里面都有些元件，电视机把那些电器元件封装在黑匣子里，提供给用户的只是几个按钮接口，

通过按钮就能实现对电视机的操作。）

提示：在编程语言里，对外提供的接口（接口可理解为了一个入口），就是函数，称为接口函数，这与接口的概念还

不一样，接口代表一组接口函数的集合体。

三、封装分为两个层面

封装其实分为两个层面，但无论哪种层面的封装，都要对外界提供好访问你内部隐藏内容的接口（接口可以理解为入

口，有了这个入口，使用者无需且不能够直接访问到内部隐藏的细节，只能走接口，并且我们可以在接口的实现上附加更

多的处理逻辑，从而严格控制使用者的访问）

　　第一个层面的封装（什么都不用做）：创建类和对象会分别创建二者的名称空间，我们只能用类名.或者obj.的方式去

访问里面的名字，这本身就是一种封装。
注意：对于这一层面的封装（隐藏），类名.和实例名.就是访问隐藏属性的接口

　第二个层面的封装：类中把某些属性和方法隐藏起来(或者说定义成私有的)，只在类的内部使用、外部无法访问，或

者留下少量接口（函数）供外部访问。

　　Python中私有化的方法也比较简单，即在准备私有化的属性（包括方法、数据）名字前面加两个下划线即可。
'''









'''
类属性与方法
类的私有属性
__private_attrs：两个下划线开头，声明该属性为私有，不能在类地外部被使用或直接访问。在类内部的方法中使用时 self.__private_attrs。

类的方法
在类地内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self，且为第一个参数，self 代表的是类的实例。

self 的名字并不是规定死的，也可以使用 this，但是最好还是按照约定是用 self。

类的私有方法
__private_method：两个下划线开头，声明该方法为私有方法，只能在类的内部调用 ，不能在类地外部调用。self.__private_methods。
'''


# 私有变量
# 封装
class JustCounter:
    __secretCount = 0  # 私有变量
    publicCount = 0  # 公有变量

    def count(self):
        self.__secretCount += 1  # 内部私有变量的操作
        self.publicCount += 1    # 内部公开变量的操作
        print(self.__secretCount) # 输出私有变量--在类内部
        print(self.publicCount)


counter = JustCounter()
counter.count()
# counter.count()

print(counter.publicCount) # 可以访问公有变量
# print(counter.__secretCount)  # 报错，实例不能访问私有变量
print(counter._JustCounter__secretCount)  # 特殊的访问方式